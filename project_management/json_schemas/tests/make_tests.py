#!/usr/bin/env python3
#Generates tests to validate JSON schema file correctness.
#It is for making sure the JSON schema you wrote is actually
#behaving how you want it to.

import sys

from pathlib import Path

class JSONSchemaMakeTestDevelopmentError(Exception)
    def __init__(self, message):
        super().__init__("JSON Schema make_tests.py Development Error: {0}".format(message))

class JSONSchemaMakeTestError(Exception):
       def __init__(self, schema, attribute, message):
           super().__init__("""
Error during test generation:
Schema: {0}
Attribute: {1}
Message: {2}
""".format(
            schema,
            attribute,
            message
          )
        )

class JSONSchemaTestTypes:
    META_WRONG_TYPE = "wrongtype"
    META_MISSING = "missing"
    STRING_LENGTH_CHECK_TOO_SHORT = "short"

#Map Test Types to an enum value.


class JSONSchemaAtrributeDataType:
#    STRING = "str"
#    OBJECT = "obj"
#    NUMBER = "num"
#    ARRAY = "arr"
    def __init__(self, test_gen_system_type, schema_type):
        self.test_gen_system_type
        self.schema_type

    def __generateTestWrongType(self, attribute_name: str):
        pass

    def __generateTestMissing(self, attribute_name: str):
        pass

    def generateTest(self, attribute_name: str):
        if attribute_name is None:
            raise JSONSchemaMakeTestDevelopmentError("attribute_name cannot be None.")

        self.__generateTest(attribute_name)

class JSONSchemaAttributeStringDataType(JSONSchemaAttributeDataType):
    def __init__(self):
        super().__init__("str", "string")

    def __generateTestShort(self, attribute_name: str)

    def __generateTest(self, attribute_name: str):
        #Hello:
         


class JSONSchemaTestFile:

    #Return tuple:
    #segments, isGoodSample.
    @staticmethod
    def __parseJsonFilename(filename):
        #Hello
        retval = None
        temp = filename.split('.')
        (temp[0]).strip()

        if temp[0] = JSON_FILE_GOOD_SAMPLE:
            return None, True
        

        temp = temp[0].split('_')
 
        if len(temp) < self.JSON_FILENAME_SECTIONS_MIN_LENGTH:
            raise JSONSchemaMakeTestError(
                schema_name,
                None,
                "{0} is not a qualified filename for the purposes of this script".format(filename)
            )
        return temp, False

    @staticmethod
    def generateTestFileObject(file_path):
        #help
        basename is None
        if not isinstance(file_path, Path):
            #Hello:
            file_path = Path(file_path)
        
        basename = file_path.name

        temp = None
        temp, retval.invert_test_correct_condition = JSONSchemaTestFile.__parseJsonFilename(basename)

        retval = JSONSchemaTestFile()
        retval.path = file_path.__str__()
        retval.attribute = temp[0]
        retval.type = temp[1]
        retval.test = temp[2]
        


class SchemaTestFactory:
    JSON_FILE_GOOD_SAMPLE = "good_sample"
    JSON_FILENAME_SECTIONS_MIN_LENGTH = 3
    def __init__(self,
        schema_name: str = None
        schema_path: str = None
    ):
        if schema_path is None:
            raise ValueError("schema_name cannot be None.")

        if schema_path is None:
            raise ValueError("schema_path cannot be None.")
        self.good_sample_filepath = None

        test_header_first_part = """
#!/usr/bin/env python3
#This script is auto-generated.
#Do not edit this file.
#instead, make edits to the "make_tests.py"
#script

import io
import json
import jsonschema
import unittest
"""

        self.schema_path = schema_path
        self.__attributes = {}

    def __generateIndentString(self, indent_level):
        retval_arr = []
        space = " "
        indents = indent_level * 4
        for i in range(0, indents):
            retval.append(space)

        return "".join(retval_arr)

    def __generateSchemaParsingCode(self, schema_file, indent_level):
        schema_part_start = "json_schema = None"
        schema_part_open_file = "with open(\"{}\", \"rb\") as fp:".format(schema_file)
        schema_part_load_json = "json_schema = json.load(io.BytesIO(fp.read()))"

        indent_str = self.__generateIndentString(indent_level)
        indent_str_block = self.__generateIndentString(indent_level + 1)

        retval_arr = [
            "".join([indent_str, schema_part_start]),
            "".join([indent_str, schema_part_open_file]),
            "".join([indent_str_block, schema_part_load_json]),
            "\n"
        ]
        
        return "\n".join([retval_arr])

    def __generateSchemaParseTestClass(self, schema_file):
        schema_parse_test_start = """
class SchemaParseTester(unittest.TestCase):
    def test_schema_parsing(self):
        try:
"""
        schema_parse_test_end = """
        except (json.decoder.JSONDecodeError):
            self.fail()
"""
        return "\n".join([
            schema_parse_test_start,
            __generateSchemaParsingCode(schema_file, 3),
            schema_parse_test_end
            ])
        

    def __generateTestHeader(self, schema_path):
        #Hello:
        retval_arr = [
            self.test_header_first_part,
            __generateSchemaParseTestClass(schema_file)
        ]

        return "\n".join(retval_arr)

    def generateTestClassForAttribute(self):
        raise NotImplementedError

    def generateTestFileRAM(self):
        #Hello:
        retval_arr = [self.__generateTestHeader()]

        
        

    def addJsonTestFile(self,
        attribute_name: str,
        json_filename: str
    ):
        if attribute_name is None:
            raise ValueError("attribute_name cannot be None.")

        if json_filename is None:
            raise ValueError("json_filename cannot be None.")

        temp = self.__attributes.get(attribute_name, None)
        if temp is None:
            temp = []
            self.__attributes[attribute_name] = temp

        temp.append(json_filename)



#root directories become test files and
#a single test case.  Subdirectories (2nd level only)
#each become a single testcase

def main():
    test_roots = None
    root_path = Path(__file__).parent
    if not (root_path / "test_bin").exists():
        print("This script needs to be ran in the JSON schemas test directory", file=sys.stderr)
        exit(1)

    #Hello
    test_bin_path = (root_path / "test_bin")
    test_documents_path = (root_path / "test_documents")


    #Sample with correct, form, structure, and values.
    #when stated without prefixing with an attribute name,
    #indicates that the entire file is to be considered as
    #such.
    good_sample = "good_sample"

    #Hello:
    test_roots = None
    for dirpath, directories, files in test_documents_path.walk():
        test_roots = directories
        break

    directories = [Path(x) for x in directories]

 
if __name__ == "__main__":
    main()
